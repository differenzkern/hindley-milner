type Bool = True | False
type Nat = Z | S Nat

fun neg x = match x {
  | True → False
  | False → True
}

fun or x y = match x {
  | True → True
  | False → y
}

fun and x y = match x {
  | True → y
  | False → False
}

fun xor x y = match x {
  | True → match y {
    | False → True
    | True → False
  }
  | False → y
}

fun if x a b = match x {
  | True → a
  | False → b
}

fun add n m = match n {
  | Z → m
  | S n → S (add n m)
}

fun alpha a n = match a {
   | Z → Z
   | S a → match a {
      | Z → S Z
      | S a → n
   }
}

fun is_odd n = match n {
  | Z → False
  | S n → neg (is_odd n)
}

fun phi a b c = match c {
  | Z → add a b
  | S c → match b {
    | Z → alpha a c
    | S b → phi a (phi a b (S c)) c 
  }
}

λ z. (let id = λ x. x in (let a = id z in match z { | Z → is_odd a | S n → (id True) }))
